@page "/plateau"
@namespace EquipeJeuDeRole.Pages
@using Microsoft.JSInterop
@using System.Text.Json
@using System.Text.Json.Serialization
@inject EntityService EntityService
@inject IJSRuntime JsRuntime
@using Microsoft.AspNetCore.Components






@code {

    
    

    protected override async Task OnInitializedAsync()
    {
        
        
        try
        {
            if (JsRuntime == null || EntityService == null)
            {
                Console.WriteLine("JSRuntime or EntityService is null.");
                return;
            }

            var serializedData = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "pageStateData");

            if (!string.IsNullOrEmpty(serializedData))
            {
                Console.WriteLine($"Données récupérées de localStorage : {serializedData}");
                var options = new JsonSerializerOptions
                {
                    Converters = { new JsonStringEnumConverter()}
                };
                var plateauState = JsonSerializer.Deserialize<PlateauState>(serializedData, options);

                terrain1 = plateauState.Terrain;
                if (plateauState.Entity!=null)
                {
                    switch (plateauState.Entity.Classes)
                    {
                        case Classes.GUERRIER:
                            personnage = JsonSerializer.Deserialize<Guerrier>(JsonSerializer.Serialize(plateauState.Entity, options), options);
                            break;
                        case Classes.ARCHER:
                            personnage = JsonSerializer.Deserialize<Archer>(JsonSerializer.Serialize(plateauState.Entity, options), options);
                                break;
                        case Classes.SORCIER:
                            personnage = JsonSerializer.Deserialize<Sorcier>(JsonSerializer.Serialize(plateauState.Entity, options), options);
                                break;
                                    
                    }
                }
                
                

                if (personnage != null)
                {
                    terrain1.plateau[personnage.row, personnage.col] = personnage;
                }

               
                Sauvegarde();
            }
            else
            {
                personnage = EntityService.Entity;
                terrain1 = new Terrain();
                Monstre malefax = new Monstre("Malefax", Races.MALEFAX);

                malefax.row = 43;
                malefax.col = 50;

                terrain1.plateau[43, 50] = null;
                terrain1.plateau[malefax.row, malefax.col] = malefax;

                personnage.row = terrain1.plateau.GetLength(0) / 2;
                personnage.col = terrain1.plateau.GetLength(1) / 2;
                
                terrain1.plateau[personnage.row, personnage.col] = personnage;
                terrain1.plateau[monstre.row, monstre.col] = monstre;
                Console.WriteLine(terrain1.plateau.GetLength(0));
                Sauvegarde();
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur dans OnInitializedAsync : {ex.Message}");
        }

        await base.OnInitializedAsync();
    }



    public void Sauvegarde()
    {
        var plateauState = new
        {
            Entity = personnage,
            Monstre = monstre,
            Terrain = terrain1
            
        };
        
        try
        {
            var options = new JsonSerializerOptions
            {
                Converters = { new JsonStringEnumConverter() }
            };
            var serializedData = System.Text.Json.JsonSerializer.Serialize(plateauState, options);
            JsRuntime.InvokeVoidAsync("localStorage.setItem", "pageStateData", serializedData);
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"Erreur de sérialisation JSON : {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la sauvegarde : {ex.Message}");
        }
    }

    public string AfficherContenuCellule(int row, int col)
    {
        try
        {
            int targetRow = personnage?.row + row ?? 0;
            int targetCol = personnage?.col + col ?? 0;

                // Vérifiez si les nouvelles coordonnées sont dans les limites du tableau
            if (terrain1 != null &&
                terrain1.plateau != null &&
                targetRow >= 0 && targetRow < terrain1.plateau.GetLength(0) &&
                targetCol >= 0 && targetCol < terrain1.plateau.GetLength(1))
            {
                Entity? cellEntity = terrain1.plateau[targetRow, targetCol];

                if (cellEntity != null)
                {
                    // Affichez l'image correspondante à l'entité
                    var entityImage = GetEntityImage(cellEntity);
                    return $"<img src='{entityImage}' alt='Entité' style=' width: 100%; height: 100%;' />";
                }
                
                else
                {
                // Si l'entité est null, affichez autre chose
                    return "0";
                }
            }
            else
            {
                Console.WriteLine($"Erreur dans AfficherContenuCellule : terrain1 ou plateau est null, targetRow={targetRow}, targetCol={targetCol}");
                return "*";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur dans AfficherContenuCellule : {ex.Message}");
            return "*";
        }
    }

    public string GetEntityImage(Entity entity)
    {
        string entityTypeName;
        if (entity.Race is Races.MALEFAX || entity.Nom=="MALEFAX")
        {
            entityTypeName = entity.Race.ToString().ToUpper();
        }
        else
        {
            entityTypeName = entity.GetType().Name.ToUpper();
        }
        
        
        return $"/sample-data/{entityTypeName}.png";
    }

    

    private void HandleKeyDown(KeyboardEventArgs touche)
    {
        int targetRow = personnage.row;
        int targetCol = personnage.col;

        switch (touche.Key)
        {
            case "ArrowLeft":
                targetCol--;
                break;
            case "ArrowRight":
                targetCol++;
                break;
            case "ArrowUp":
                targetRow--;
                break;
            case "ArrowDown":
                targetRow++;
                break;
        }

        // Vérifiez si les nouvelles coordonnées sont dans les limites du tableau
        if (IsDansLimites(targetRow, targetCol))
        {
            // Vérifiez s'il y a un monstre à la nouvelle position
            Entity? targetEntity = terrain1.plateau[targetRow, targetCol];

            if (targetEntity != null && targetEntity.GetType() == typeof(Monstre))
            {
                monstre = (Monstre)targetEntity;
                // Si un monstre est rencontré, redirigez vers la zone de combat
                AfficherZoneCombat();
            }
            else
            {
                DeplacerVersNouvellePosition(targetRow, targetCol);
            }
        }
        else
        {
            Console.WriteLine("Déplacement en dehors des limites du tableau");
        }
    }

    
    private bool IsDansLimites(int row, int col)
    {
        return row >= 0 && row < terrain1.plateau.GetLength(0) && col >= 0 && col < terrain1.plateau.GetLength(1);
    }

    private void DeplacerVersNouvellePosition(int targetRow, int targetCol)
    {
        terrain1.plateau[personnage.row, personnage.col] = null;
        personnage.row = targetRow;
        personnage.col = targetCol;
        terrain1.plateau[personnage.row, personnage.col] = personnage;
        Sauvegarde();
        StateHasChanged();
    }
    
    
    
   
    

    
    public void Attaquer(string attaque)
    {
        
        if (personnage != null && enCombat)
        {
            if (tourDuJoueur)
            {
                
                AttaqueDuJoueur(attaque);
                
                Console.WriteLine($"Dégâts infligés: {personnage.damage}");
                // Vérifiez si le monstre a perdu
                if (monstre.PointDeVie <= 0)
                {
                    FinDuCombat(true); // Le joueur a gagné
                    Sauvegarde();
                }
            }
            else
            {
                monstre.AttaqueMECHANTE(personnage);
                Console.WriteLine($"Dégâts subis: {monstre.damage}");
                // Vérifiez si le joueur a perdu
                if (personnage.PointDeVie <= 0)
                {
                    FinDuCombat(false); // Le monstre a gagné
                    Sauvegarde();
                }
            }

            // Passez au tour suivant
            tourDuJoueur = !tourDuJoueur;
            StateHasChanged();
        }

        
    }
    
   

    private void AttaqueDuJoueur(string attaque)
    {
        if (personnage is Guerrier guerrier)
        {
            switch (attaque)
            {
                case "AttaqueLegere":
                    guerrier.AttaqueLegere(monstre);
                    break;
                case "AttaqueLourde":
                    guerrier.AttaqueLourde(monstre);
                    break;
                // Ajoutez d'autres attaques du joueur au besoin
            }
        }
        else if (personnage is Archer archer)
        {
            switch (attaque)
            {
                case "AttaqueDague":
                    archer.AttaqueDague(monstre);
                    break;
                case "AttaqueFleche":
                    archer.AttaqueFleche(monstre);
                    break;
                // Ajoutez d'autres attaques du joueur au besoin
            }
        }
        else if (personnage is Sorcier sorcier)
        {
            switch (attaque)
            {
                case "BouleDeFeux":
                    sorcier.BouleDeFeux(monstre);
                    break;
                case "Baton":
                    sorcier.Baton(monstre);
                    break;
                // Ajoutez d'autres attaques du joueur au besoin
            }
        }
    }
    
    public void FinDuCombat(bool joueurGagnant)
    {
        enCombat = false;

        

        // Retirez le monstre du terrain s'il a été vaincu par le joueur
        if (joueurGagnant)
        {
            terrain1.plateau[monstre.row, monstre.col] = null;
        }
        else
        {
            // Si le monstre a gagné, replacez le joueur à la position d'origine
            terrain1.plateau[personnage.row, personnage.col] = null;
            personnage.row = 50;
            personnage.col = 50;
            terrain1.plateau[personnage.row, personnage.col] = personnage;
            personnage.PointDeVie = 20;
        }

        // Mettez à jour le plateau
        showPlateau = true;
        StateHasChanged();
    }

    
    
    
    public void AfficherZoneCombat()
    {
        enCombat = true;
        tourDuJoueur = true;
        showPlateau = false;
    }
    

    public void ShowPlateau()
    {
        showPlateau = false;
    }
    
    private List<string> AttaqueJoueur()
    {
        if (personnage is Guerrier)
        {
            return ((Guerrier)personnage).AttackList;
        }
        else if (personnage is Archer)
        {
            return ((Archer)personnage).AttackList;
        }
        else if (personnage is Sorcier)
        {
            return ((Sorcier)personnage).AttackList;
        }
        else
        {
            // Handle other character types or return a default attack list
            return new List<string> { "Default Attack" };
        }
    }

    public Terrain terrain1;
    public Entity personnage;
    public Monstre? monstre;
    public bool showPlateau = true;
    public bool enCombat = false;
    public bool tourDuJoueur = true; // true si c'est le tour du joueur, false si c'est le tour du monstre


    

}

<head>
    
    <link rel="stylesheet" href="/Pages/Plateau/Plateau.razor.css" />
</head>
<PageTitle>JeuxDeRole</PageTitle>
<h1 class="title-plat">Jeux de role</h1>
<p></p>

@if (showPlateau && personnage != null)
{
    <div class="board" @onkeydown="HandleKeyDown" tabindex="0" autofocus style="outline:none">
        @for (int i = -3; i < 4; i++)
        {
            <div class="zc-row">
                @for (int j = -3; j < 4; j++)
                {
                    <div class="zc-cell" id=@($"{personnage.row + i}-{personnage.col + j}")>
                        @(new MarkupString(AfficherContenuCellule(i, j)))
                    </div>
                }
            </div>
        }

        <div class="div-aff">
            <div>Position : @($"{personnage.row}-{personnage.col}")</div>
            <div>PV : @personnage.PointDeVie</div>
        </div>
    </div>

}
@if (enCombat)
{
    <div class="globalDiv">
        <h3 class="titre-combat">ZoneCombat</h3>
        <div class="interface1">
            <ul class="list-nav">
                <li><NavLink href="Plateau" class="btn btn-primary">Retourner sur la carte </NavLink></li>
            </ul>
            <ul>
                <li><NavLink href="/" class="btn btn-primary">Quitter le jeu</NavLink></li>
            </ul>
        </div>
        <div class="ZoneCombat">
            <div class="espace-joueur">
                <img src="@GetEntityImage(personnage)" style="height: 100%; max-width: 100%;">
            </div>
            
            <div class="espace-ennemi">
                <img src="/sample-data/MONSTRE.png" >
            </div>
        </div>
        <div class="interface1">
            <div class="zoneTxtCombat">
                <div>Personnage - PV: @personnage.PointDeVie</div>
                <div>Monstre - PV: @monstre.PointDeVie</div>
            </div>
            <div class="espAttac">
                <div class="listeAttaques">
                    <ul>
                        @foreach (var attack in AttaqueJoueur())
                        {
                            <li><button @onclick="() => Attaquer(attack)" class="attac">@attack</button></li>
                        }
                    </ul>
                </div>
            </div>
            <div class="infoCombat">
                <div>
                    <p>
                        <strong>
                            @if (tourDuJoueur)
                            {
                                <p>C'est le tour de @personnage.Nom</p>
                            }
                            else
                            {
                                <p>C'est le tour de @monstre.Race</p>
                            }
                        </strong>
                    </p>
                </div>
            </div>
        </div>
    </div>
}

    <NavLink style="text-align: center" href="/" class="btn btn-primary">Quitter le jeux</NavLink>
